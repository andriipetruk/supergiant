// Code generated by go-bindata.
// sources:
// ui/views/index.html
// ui/views/kube_resources.html
// ui/views/layouts/layout.html
// ui/views/login.html
// ui/views/new.html
// ui/views/partials/item_list.html
// ui/views/show.html
// ui/assets/css/main.css
// ui/assets/css/main.css.map
// ui/assets/fonts/Doppio-One.ttf
// ui/assets/fonts/glyphicons-halflings-regular.eot
// ui/assets/fonts/glyphicons-halflings-regular.svg
// ui/assets/fonts/glyphicons-halflings-regular.ttf
// ui/assets/fonts/glyphicons-halflings-regular.woff
// ui/assets/fonts/glyphicons-halflings-regular.woff2
// ui/assets/images/icons/sidebar_cloudaccounts.svg
// ui/assets/images/icons/sidebar_components.svg
// ui/assets/images/icons/sidebar_dockerkeys.svg
// ui/assets/images/icons/sidebar_entrypoints.svg
// ui/assets/images/icons/sidebar_instances.svg
// ui/assets/images/icons/sidebar_namespaces.svg
// ui/assets/images/icons/sidebar_nodes.svg
// ui/assets/images/icons/sidebar_volumes.svg
// ui/assets/images/sg_logo.svg
// ui/assets/js/index.js
// ui/assets/js/main.js
// ui/assets/js/resource_graphs.js
// ui/assets/js/vendor/bootstrap.min.js
// ui/assets/js/vendor/d3.v4.min.js
// ui/assets/js/vendor/jquery-3.1.0.min.js
// DO NOT EDIT!

package ui

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// uiViewsIndexHtml reads file data from disk. It returns an error on failure.
func uiViewsIndexHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/index.html"
	name := "ui/views/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiViewsKube_resourcesHtml reads file data from disk. It returns an error on failure.
func uiViewsKube_resourcesHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/kube_resources.html"
	name := "ui/views/kube_resources.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiViewsLayoutsLayoutHtml reads file data from disk. It returns an error on failure.
func uiViewsLayoutsLayoutHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/layouts/layout.html"
	name := "ui/views/layouts/layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiViewsLoginHtml reads file data from disk. It returns an error on failure.
func uiViewsLoginHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/login.html"
	name := "ui/views/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiViewsNewHtml reads file data from disk. It returns an error on failure.
func uiViewsNewHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/new.html"
	name := "ui/views/new.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiViewsPartialsItem_listHtml reads file data from disk. It returns an error on failure.
func uiViewsPartialsItem_listHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/partials/item_list.html"
	name := "ui/views/partials/item_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiViewsShowHtml reads file data from disk. It returns an error on failure.
func uiViewsShowHtml() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/views/show.html"
	name := "ui/views/show.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsCssMainCss reads file data from disk. It returns an error on failure.
func uiAssetsCssMainCss() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/css/main.css"
	name := "ui/assets/css/main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsCssMainCssMap reads file data from disk. It returns an error on failure.
func uiAssetsCssMainCssMap() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/css/main.css.map"
	name := "ui/assets/css/main.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsFontsDoppioOneTtf reads file data from disk. It returns an error on failure.
func uiAssetsFontsDoppioOneTtf() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/fonts/Doppio-One.ttf"
	name := "ui/assets/fonts/Doppio-One.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func uiAssetsFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/fonts/glyphicons-halflings-regular.eot"
	name := "ui/assets/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func uiAssetsFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/fonts/glyphicons-halflings-regular.svg"
	name := "ui/assets/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func uiAssetsFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/fonts/glyphicons-halflings-regular.ttf"
	name := "ui/assets/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func uiAssetsFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/fonts/glyphicons-halflings-regular.woff"
	name := "ui/assets/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func uiAssetsFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/fonts/glyphicons-halflings-regular.woff2"
	name := "ui/assets/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_cloudaccountsSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_cloudaccountsSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_cloudaccounts.svg"
	name := "ui/assets/images/icons/sidebar_cloudaccounts.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_componentsSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_componentsSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_components.svg"
	name := "ui/assets/images/icons/sidebar_components.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_dockerkeysSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_dockerkeysSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_dockerkeys.svg"
	name := "ui/assets/images/icons/sidebar_dockerkeys.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_entrypointsSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_entrypointsSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_entrypoints.svg"
	name := "ui/assets/images/icons/sidebar_entrypoints.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_instancesSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_instancesSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_instances.svg"
	name := "ui/assets/images/icons/sidebar_instances.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_namespacesSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_namespacesSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_namespaces.svg"
	name := "ui/assets/images/icons/sidebar_namespaces.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_nodesSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_nodesSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_nodes.svg"
	name := "ui/assets/images/icons/sidebar_nodes.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesIconsSidebar_volumesSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesIconsSidebar_volumesSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/icons/sidebar_volumes.svg"
	name := "ui/assets/images/icons/sidebar_volumes.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImagesSg_logoSvg reads file data from disk. It returns an error on failure.
func uiAssetsImagesSg_logoSvg() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/images/sg_logo.svg"
	name := "ui/assets/images/sg_logo.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsJsIndexJs reads file data from disk. It returns an error on failure.
func uiAssetsJsIndexJs() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/js/index.js"
	name := "ui/assets/js/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsJsMainJs reads file data from disk. It returns an error on failure.
func uiAssetsJsMainJs() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/js/main.js"
	name := "ui/assets/js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsJsResource_graphsJs reads file data from disk. It returns an error on failure.
func uiAssetsJsResource_graphsJs() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/js/resource_graphs.js"
	name := "ui/assets/js/resource_graphs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsJsVendorBootstrapMinJs reads file data from disk. It returns an error on failure.
func uiAssetsJsVendorBootstrapMinJs() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/js/vendor/bootstrap.min.js"
	name := "ui/assets/js/vendor/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsJsVendorD3V4MinJs reads file data from disk. It returns an error on failure.
func uiAssetsJsVendorD3V4MinJs() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/js/vendor/d3.v4.min.js"
	name := "ui/assets/js/vendor/d3.v4.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsJsVendorJquery310MinJs reads file data from disk. It returns an error on failure.
func uiAssetsJsVendorJquery310MinJs() (*asset, error) {
	path := "/Users/Scott/golang/src/github.com/supergiant/supergiant/ui/assets/js/vendor/jquery-3.1.0.min.js"
	name := "ui/assets/js/vendor/jquery-3.1.0.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/views/index.html": uiViewsIndexHtml,
	"ui/views/kube_resources.html": uiViewsKube_resourcesHtml,
	"ui/views/layouts/layout.html": uiViewsLayoutsLayoutHtml,
	"ui/views/login.html": uiViewsLoginHtml,
	"ui/views/new.html": uiViewsNewHtml,
	"ui/views/partials/item_list.html": uiViewsPartialsItem_listHtml,
	"ui/views/show.html": uiViewsShowHtml,
	"ui/assets/css/main.css": uiAssetsCssMainCss,
	"ui/assets/css/main.css.map": uiAssetsCssMainCssMap,
	"ui/assets/fonts/Doppio-One.ttf": uiAssetsFontsDoppioOneTtf,
	"ui/assets/fonts/glyphicons-halflings-regular.eot": uiAssetsFontsGlyphiconsHalflingsRegularEot,
	"ui/assets/fonts/glyphicons-halflings-regular.svg": uiAssetsFontsGlyphiconsHalflingsRegularSvg,
	"ui/assets/fonts/glyphicons-halflings-regular.ttf": uiAssetsFontsGlyphiconsHalflingsRegularTtf,
	"ui/assets/fonts/glyphicons-halflings-regular.woff": uiAssetsFontsGlyphiconsHalflingsRegularWoff,
	"ui/assets/fonts/glyphicons-halflings-regular.woff2": uiAssetsFontsGlyphiconsHalflingsRegularWoff2,
	"ui/assets/images/icons/sidebar_cloudaccounts.svg": uiAssetsImagesIconsSidebar_cloudaccountsSvg,
	"ui/assets/images/icons/sidebar_components.svg": uiAssetsImagesIconsSidebar_componentsSvg,
	"ui/assets/images/icons/sidebar_dockerkeys.svg": uiAssetsImagesIconsSidebar_dockerkeysSvg,
	"ui/assets/images/icons/sidebar_entrypoints.svg": uiAssetsImagesIconsSidebar_entrypointsSvg,
	"ui/assets/images/icons/sidebar_instances.svg": uiAssetsImagesIconsSidebar_instancesSvg,
	"ui/assets/images/icons/sidebar_namespaces.svg": uiAssetsImagesIconsSidebar_namespacesSvg,
	"ui/assets/images/icons/sidebar_nodes.svg": uiAssetsImagesIconsSidebar_nodesSvg,
	"ui/assets/images/icons/sidebar_volumes.svg": uiAssetsImagesIconsSidebar_volumesSvg,
	"ui/assets/images/sg_logo.svg": uiAssetsImagesSg_logoSvg,
	"ui/assets/js/index.js": uiAssetsJsIndexJs,
	"ui/assets/js/main.js": uiAssetsJsMainJs,
	"ui/assets/js/resource_graphs.js": uiAssetsJsResource_graphsJs,
	"ui/assets/js/vendor/bootstrap.min.js": uiAssetsJsVendorBootstrapMinJs,
	"ui/assets/js/vendor/d3.v4.min.js": uiAssetsJsVendorD3V4MinJs,
	"ui/assets/js/vendor/jquery-3.1.0.min.js": uiAssetsJsVendorJquery310MinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"main.css": &bintree{uiAssetsCssMainCss, map[string]*bintree{}},
				"main.css.map": &bintree{uiAssetsCssMainCssMap, map[string]*bintree{}},
			}},
			"fonts": &bintree{nil, map[string]*bintree{
				"Doppio-One.ttf": &bintree{uiAssetsFontsDoppioOneTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.eot": &bintree{uiAssetsFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
				"glyphicons-halflings-regular.svg": &bintree{uiAssetsFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
				"glyphicons-halflings-regular.ttf": &bintree{uiAssetsFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff": &bintree{uiAssetsFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff2": &bintree{uiAssetsFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
			}},
			"images": &bintree{nil, map[string]*bintree{
				"icons": &bintree{nil, map[string]*bintree{
					"sidebar_cloudaccounts.svg": &bintree{uiAssetsImagesIconsSidebar_cloudaccountsSvg, map[string]*bintree{}},
					"sidebar_components.svg": &bintree{uiAssetsImagesIconsSidebar_componentsSvg, map[string]*bintree{}},
					"sidebar_dockerkeys.svg": &bintree{uiAssetsImagesIconsSidebar_dockerkeysSvg, map[string]*bintree{}},
					"sidebar_entrypoints.svg": &bintree{uiAssetsImagesIconsSidebar_entrypointsSvg, map[string]*bintree{}},
					"sidebar_instances.svg": &bintree{uiAssetsImagesIconsSidebar_instancesSvg, map[string]*bintree{}},
					"sidebar_namespaces.svg": &bintree{uiAssetsImagesIconsSidebar_namespacesSvg, map[string]*bintree{}},
					"sidebar_nodes.svg": &bintree{uiAssetsImagesIconsSidebar_nodesSvg, map[string]*bintree{}},
					"sidebar_volumes.svg": &bintree{uiAssetsImagesIconsSidebar_volumesSvg, map[string]*bintree{}},
				}},
				"sg_logo.svg": &bintree{uiAssetsImagesSg_logoSvg, map[string]*bintree{}},
			}},
			"js": &bintree{nil, map[string]*bintree{
				"index.js": &bintree{uiAssetsJsIndexJs, map[string]*bintree{}},
				"main.js": &bintree{uiAssetsJsMainJs, map[string]*bintree{}},
				"resource_graphs.js": &bintree{uiAssetsJsResource_graphsJs, map[string]*bintree{}},
				"vendor": &bintree{nil, map[string]*bintree{
					"bootstrap.min.js": &bintree{uiAssetsJsVendorBootstrapMinJs, map[string]*bintree{}},
					"d3.v4.min.js": &bintree{uiAssetsJsVendorD3V4MinJs, map[string]*bintree{}},
					"jquery-3.1.0.min.js": &bintree{uiAssetsJsVendorJquery310MinJs, map[string]*bintree{}},
				}},
			}},
		}},
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{uiViewsIndexHtml, map[string]*bintree{}},
			"kube_resources.html": &bintree{uiViewsKube_resourcesHtml, map[string]*bintree{}},
			"layouts": &bintree{nil, map[string]*bintree{
				"layout.html": &bintree{uiViewsLayoutsLayoutHtml, map[string]*bintree{}},
			}},
			"login.html": &bintree{uiViewsLoginHtml, map[string]*bintree{}},
			"new.html": &bintree{uiViewsNewHtml, map[string]*bintree{}},
			"partials": &bintree{nil, map[string]*bintree{
				"item_list.html": &bintree{uiViewsPartialsItem_listHtml, map[string]*bintree{}},
			}},
			"show.html": &bintree{uiViewsShowHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

